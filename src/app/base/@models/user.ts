import { ResponseStatus } from 'src/app/shared/@models/response-status';

export interface LoginAsNormalUser_Response {
  responseStatus: ResponseStatus;
  ticket: {
    userName: string;
    loginId: string;
    loginName: string;
    isAdminUser: boolean;
    isEmulateCorporate: boolean;
    isGroupAdminUser: boolean;
    additionalInfo: any;
    profileName: string;
    profileId: string;
    clientIP: string;
    accessibleOuIds: any[];
    accessibleCashProProductIds: string[];
    currentCashProProductId: string;
    applicationDate: string;
    userKey: any;
    productKey: any;
    loginOUId: string;
    loginOUName: string;
    currentOUId: string;
    currentOUName: string;
    userType: string;
    authenticationRequiredAt: string;
    lastLogin: string;
    hubUser: any;
    costCenterCode: string;
    isGroupUser: boolean;
    groupId: any;
    isGroupTransactional: boolean;
    forGroup: boolean;
    extendedTicket: boolean;
    userDTO: {
      id: string;
      version: number;
      enrichments: any;
      draftRecordId: string;
      draftRecordVersion: number;
      isDraft: boolean;
      authorized: boolean;
      lastAction: any;
      rejectReason: any;
      modifiedAtOUId: any;
      modifiedBy: any;
      checkedBy: any;
      modifiedOn: any;
      modifiedSysOn: any;
      checkedOn: any;
      checkedSysOn: any;
      makerName: any;
      checkerName: any;
      uploadBatchId: any;
      entityIdentifier: any;
      makerChannel: any;
      checkerChannel: any;
      callMakerCheckerStrategy: boolean;
      noVerifiedBy: any;
      noVerifierRequired: any;
      verifyAuthLevel: any;
      verified: boolean;
      entityKey: any;
      updateBy: any;
      enabled: boolean;
      active: boolean;
      effectiveFrom: any;
      effectiveTill: any;
      firstName: any;
      lastName: any;
      loginFullName: any;
      isAdminUser: any;
      sex: any;
      profileId: string;
      profileName: any;
      lastChangePasswordDate: any;
      moduleMapping: any;
      profileImage: any;
      channel: string;
      ipAddress: any;
      macIPAddress: any;
      login: string;
      password: any;
      corporateUserType: any;
      corporateId: string;
      corporateName: any;
      corporateCode: any;
      designation: any;
      department: any;
      email: any;
      employeecode: any;
      status: number;
      badLogins: any;
      lastLogin: any;
      pwdexpdays: any;
      pwdexpdate: any;
      startDate: any;
      endDate: any;
      signatureFileName: any;
      uploadedFileName: any;
      tokenNo: any;
      address1: any;
      address2: any;
      address3: any;
      countryId: any;
      stateId: any;
      city: any;
      locationId: any;
      pinCode: any;
      telNo: any;
      faxNo: any;
      countryName: any;
      stateName: any;
      locationName: any;
      authenticationRequiredAt: any;
      corporateBranchId: any;
      corporateBranchName: any;
      originalSignatureFileName: any;
      landingModule: any;
      consolidatedwidget: any;
      landingModuleVal: any;
      corporateCodeVal: any;
      isVerifier: any;
      category: any;
      categoryValue: any;
      acrossBranchAuthorization: boolean;
      isGroupUser: boolean;
      editedByGroupId: any;
      groupId: any;
      groupCorps: any[];
      usersType: string;
      selfAuthorizationLimit: any;
      groupCorporates: any[];
      moduleAccess: any;
      masterSelfAuth: boolean;
      transactionSelfAuth: boolean;
      corporateLoginRestrictions: any;
      selfServiceSelfAuth: boolean;
      roles: any;
      isFirstLogin: boolean;
      ipMappingRestriction: boolean;
      isMaskingRequired: boolean;
      corpUserAuthLimit: any[];
      userAlias: any;
      corporateGroupUserDetails: any;
      isResetUser: boolean;
      lastResetDate: any;
      authType: any;
      hardToken: boolean;
      softToken: boolean;
      activateToken: boolean;
      isHardTokenEnable: any;
      securityQuestionSet: any[];
      resetModifiedby: any;
      resetCheckedby: any;
      previousAuthType: any;
      corpErp: any;
      theme: any;
      mobileToken: boolean;
      mobilityAccess: any;
      isEnrolled: any;
      organizationId: string;
      ipaddress: any;
      userAuthType: string;
      macipaddress: any;
      userSession: any;
      userType: string;
      usession: any;
      applicableForVerifier: boolean;
      selfAuth: boolean;
    };
    serialNo: any;
    category: any;
    authorizationMatrix: any;
    sessionId: string;
    lastAccessTime: number;
    productName: any;
    isVerifier: string;
    baseCurrencyCode: string;
    baseCurrencyId: string;
    baseCountryCode: string;
    baseCountryId: any;
    languageSelected: any;
    isGroupUserVerifier: any;
    veriDetailMap: {
      TRADE: {
        verifierRequired: boolean;
        noOfVerifiers: number;
        verLevel: string;
      };
      PAYMENTS: {
        verifierRequired: boolean;
        noOfVerifiers: number;
        verLevel: string;
      };
    };
    accessiblePaymentMethodIds: any[];
    allAccountMapped: boolean;
  };
  selfAuthAccountLimit: any;
  entityIdentifier: string;
  loggable: boolean;
}
